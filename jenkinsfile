pipeline {
    agent any

    options {
        timestamps()
        ansiColor('xterm')
        disableConcurrentBuilds()
    }

    environment {
        AWS_REGION     = 'ap-south-1'
        AWS_ACCOUNT_ID = '901799140637'
        ECR_REPO       = 'docker'
        ECR_REGISTRY   = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        SONAR_HOST_URL = 'http://localhost:9000'
    }

    parameters {
        string(name: 'EC2_HOST', defaultValue: '13.235.244.68', description: 'EC2 public DNS or IP')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/ashichaudhary/Ec2-Pipline-Test.git'
                script {
                    env.GIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.IMAGE_TAG = "${env.GIT_SHORT}-${env.BUILD_NUMBER}"
                }
            }
        }

        stage('Install deps + Lint + Test') {
            steps {
                dir('backend') {
                    sh 'npm ci'
                    sh 'npm run lint || true'
                    sh 'npm run test:ci || npm test'
                }
            }
            post {
                always {
                    junit 'backend/reports/junit.xml'
                    archiveArtifacts artifacts: 'backend/coverage/**', allowEmptyArchive: true
                }
            }
        }

        stage('SonarQube Analysis') {
            environment {
                scannerHome = tool 'SonarQubeScanner'
            }
            steps {
                withSonarQubeEnv('MySonar') {
                    dir('backend') {
                        sh '''${scannerHome}/bin/sonar-scanner \
                          -Dsonar.projectKey=company-backend \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=$SONAR_HOST_URL \
                          -Dsonar.token=$SONARQUBE_TOKEN'''
                    }
                }
            }
        }

        stage('Secret Scan') {
            steps {
                sh 'trufflehog filesystem --directory backend || true'
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    withAWS(region: "${AWS_REGION}", credentials: 'aws-credentials') {
                        sh """
                            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
                            docker build -t $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG backend
                            docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
                        """
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    sshagent (credentials: ['ubuntu']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ubuntu@${params.EC2_HOST} '
                                docker pull $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG &&
                                IMAGE_TAG=$IMAGE_TAG ECR_REGISTRY=$ECR_REGISTRY ECR_REPO=$ECR_REPO docker-compose -f ~/docker-compose.yml up -d'
                        """
                    }
                }
            }
        }

        stage('Smoke Test') {
            steps {
                script {
                    sh "curl -f http://${params.EC2_HOST}/health || exit 1"
                }
            }
        }
    }

    post {
        success {
            echo "✅ Deployment successful!"
        }
        failure {
            echo "❌ Deployment failed!"
        }
    }
}
